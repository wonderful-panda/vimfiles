[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  call SourceFromConfigDir('defx_settings.vim')
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 't9md/vim-choosewin'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  call SourceFromConfigDir('denite_settings.vim')
'''

[[plugins]]
repo = 'tyru/restart.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
hook_add = '''
  let g:precious_enable_switchers = {
    \   "*": #{ setfiletype: 0 },
    \   "toml": #{ setfiletype: 1 }
    \ }
'''

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'ayu-theme/ayu-vim'
hook_add = '''
  colorscheme ayu
  set background=dark
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  func GitHeadWithSymbol() abort
    let l:head = FugitiveHead()
    return l:head == "" ? "" : "\ue0a0" . l:head
  endf
  let g:lightline = #{
    \   colorscheme: 'ayu_mirage',
    \   active: #{
    \     left: [['mode', 'paste'], ['readonly', 'filename', 'modified', 'fugitive']]
    \   },
    \   component: #{
    \     readonly: '%{&readonly ? "\ue0a2" : ""}',
    \   },
    \   component_function: #{
    \     fugitive: 'GitHeadWithSymbol'
    \   },
    \   component_visible_condition: #{
    \     readonly: '(&readonly)'
    \   },
    \   separator: #{ left: "\ue0b0", right: "\ue0b2" },
    \   subseparator: #{ left: "\ue0b1", right: "\ue0b3" },
    \ }
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_float_cursor = 1
  nmap <silent> <F12> <plug>(lsp-definition)
  nmap <silent> <C-F12> <plug>(lsp-peek-definition)
  nmap <silent> <Space>a <plug>(lsp-code-action)
  imap <silent> <C-a> <plug>(lsp-code-action)
  nmap <silent> <Space>a <plug>(lsp-code-action)
  nmap <silent> <Space>j <plug>(lsp-next-diagnostic)
  nmap <silent> <Space>k <plug>(lsp-previous-diagnostic)
  nmap <silent> <Space><Space> <plug>(lsp-hover)
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_ft = ['javascript', 'typescript', 'typescriptreact', 'toml', 'vim']
hook_add = '''
  let g:asyncomplete_enable_for_all = 0
  function! s:prepare_asynccomplete_for_buffer()
    setlocal signcolumn=yes
    call asyncomplete#enable_for_buffer()
  endfunction
  autocmd FileType javascript,typescript,typescriptreact,toml,vim call s:prepare_asynccomplete_for_buffer()

  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
  imap <c-space> <Plug>(asyncomplete_force_refresh)
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'cohama/agit.vim'
hook_source = '''
  let g:agit_stat_width = 256
'''

[[plugins]]
repo = 'styled-components/vim-styled-components'
on_ft = ['javascript', 'typescript', 'typescriptreact']

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'yarn install'
